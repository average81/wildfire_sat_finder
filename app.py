import PIL
import cv2
import numpy as np
import streamlit as st
import tempfile
import requests
from io import BytesIO
from datetime import date
from inference_sdk import InferenceHTTPClient
from typing import Union, Tuple, Dict, Any
import matplotlib.pyplot as plt

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
NASA_API_URL = "https://api.nasa.gov/planetary/earth/imagery"
ROBOFLOW_MODEL_ID = "wildfire-tksrf/2"
IMAGE_FORMATS = ("jpg", "jpeg", "png", "bmp", "tiff")

def configure_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Streamlit"""
    st.set_page_config(
        page_title="Fire Detection PRO",
        page_icon="üî•",
        layout="wide",
        initial_sidebar_state="expanded",
    )
    st.title("üî• –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤")
    st.caption("–ü—Ä–æ–µ–∫—Ç –¥–ª—è TSU CV 2025 | –¢–æ–ª—å–∫–æ Roboflow –º–æ–¥–µ–ª—å")

@st.cache_resource(show_spinner="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏...")
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è Roboflow –º–æ–¥–µ–ª–∏"""
    try:
        client = InferenceHTTPClient(
            api_url="https://detect.roboflow.com",
            api_key="2UgAsIW11EHQmt8gh36L"
        )
        #TODO: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ very low
        #client.infer("hhttps://detect.roboflow.com", model_id=ROBOFLOW_MODEL_ID)
        return client
    except Exception as e:
        st.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        st.stop()

def validate_coordinates(lat: float, lon: float) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    if not (-90 <= lat <= 90):
        return False, "‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -90 –¥–æ 90"
    if not (-180 <= lon <= 180):
        return False, "‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -180 –¥–æ 180"
    return True, ""

def convert_image(image: Union[PIL.Image.Image, np.ndarray, bytes]) -> np.ndarray:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        if isinstance(image, PIL.Image.Image):
            return cv2.cvtColor(np.array(image.convert("RGB")), cv2.COLOR_RGB2BGR)
        if isinstance(image, bytes):
            return cv2.imdecode(np.frombuffer(image, np.uint8), cv2.IMREAD_COLOR)
        return image.copy()
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

class ImageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Roboflow"""
    def __init__(self, model):
        self.model = model
        self.confidence = 0.25  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
    def process_uploaded_file(self, uploaded_file: Union[PIL.Image.Image, bytes]) -> Union[np.ndarray, None]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            return convert_image(uploaded_file)
        except Exception as e:
            st.error(f"üìÅ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return None
        
    def run_inference(self, image: np.ndarray) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with tempfile.NamedTemporaryFile(suffix=".jpg") as tmp:
                cv2.imwrite(tmp.name, image)
                result = self.model.infer(tmp.name, 
                                        model_id=ROBOFLOW_MODEL_ID)
                return {
                    "predictions": result.get("predictions", []),
                    "time": result.get("time", 0),
                    "width": image.shape[1],
                    "height": image.shape[0]
                }
        except Exception as e:
            st.error(f"ü§ñ –û—à–∏–±–∫–∞ AI-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {str(e)}")
            return None

class ResultVisualizer:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    def __init__(self):
        self.class_colors = {
            "fire": (0, 0, 255),
            "smoke": (255, 0, 0),
            "Wildfire": (0, 255, 0)
        }
        
    def visualize(self, image: np.ndarray, detections: Dict[str, Any]) -> np.ndarray:
        """–¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ bounding boxes —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        #TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –±–æ–∫—Å
        img = image.copy()
        for pred in detections.get("predictions", []):
            print(pred)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            x_center = pred["x"] * detections["width"]
            y_center = pred["y"] * detections["height"]
            width = pred["width"] * detections["width"]
            height = pred["height"] * detections["height"]
            
            x = int(x_center - width/2)
            y = int(y_center - height/2)
            w = int(width)
            h = int(height)
            
            color = self.class_colors.get(pred["class"], (0, 0, 255))
            cv2.rectangle(img, (x, y), (x+w, y+h), color, 2)
            label = f"{pred['class']} {pred['confidence']:.2f}"
            cv2.putText(img, label, (x, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
            
        return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    def show_stats(self, detections: Dict[str, Any]):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
           –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É 
        """
        stats = {"fire": 0, "smoke": 0, "Wildfire": 0}
        confidences = []
        
        for pred in detections.get("predictions", []):
            cls_name = pred["class"]
            if cls_name in stats:
                stats[cls_name] += 1
                confidences.append(pred["confidence"])
        
        with st.expander("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", expanded=True):
            cols = st.columns(3)
            cols[0].metric("üí® –ú–æ–¥–µ–ª—å 1", stats["fire"], delta_color="off")
            cols[1].metric("üí® –ú–æ–¥–µ–ª—å 2", stats["smoke"], delta_color="off")
            cols[2].metric("üî• –ü–æ–∂–∞—Ä—ã –º–æ–¥–µ–ª—å Wildfire", stats["Wildfire"], delta_color="off")
            
            if confidences:
                st.markdown(f"**üïí –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {detections.get('time', 0):.2f} ms")
                plt.figure(figsize=(10,4))
                plt.hist(confidences, bins=20, range=(0,1), color='red', alpha=0.7)
                plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
                plt.xlabel("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
                plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")
                st.pyplot(plt, clear_figure=True)
            else:
                st.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

def main():
    configure_app()
    model = load_model()
    processor = ImageProcessor(model)
    visualizer = ResultVisualizer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    session = st.session_state
    if "nasa_image" not in session:
        session.nasa_image = None
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        processor.confidence = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.25, 0.05,
                                       help="–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ–¥–µ–ª–∏ /n * –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –±—É–¥—É—Ç –ø–æ–∑–∂–µ /n –°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        st.header("üåç –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        source = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", ["üìÅ –§–∞–π–ª", "üõ∞Ô∏è NASA API"], index=0)
        
        if source == "üõ∞Ô∏è NASA API":
            api_key = st.text_input("–ö–ª—é—á NASA API", type="password", 
                                  value='uquMPkqqugLLa51krBVA3bRHlb5M6IZg2SrJkKiE',
                                  help="–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://api.nasa.gov")
            
            col1, col2 = st.columns(2)
            with col1:
                lat = st.number_input("–®–∏—Ä–æ—Ç–∞", -90.0, 90.0, 39.2106, format="%.6f")
            with col2:
                lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞", -180.0, 180.0, -121.6701, format="%.6f")
                
            selected_date = st.date_input("–î–∞—Ç–∞ —Å—ä–µ–º–∫–∏", date(2019, 1, 2),
                                        min_value=date(2017, 1, 1))
            
            if st.button("üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ —Å–ø—É—Ç–Ω–∏–∫–∞"):
                valid, msg = validate_coordinates(lat, lon)
                if not valid:
                    st.error(msg)
                    return
                
                try:
                    response = requests.get(
                        NASA_API_URL,
                        params={
                            'lat': lat,
                            'lon': lon,
                            'date': selected_date.isoformat(),
                            'dim': 0.05,
                            'api_key': api_key
                        },
                        timeout=20
                    )
                    response.raise_for_status()
                    session.nasa_image = PIL.Image.open(BytesIO(response.content))
                    st.toast("‚úÖ –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="üõ∞Ô∏è")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        else:
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", 
                                           type=IMAGE_FORMATS,
                                           help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: " + ", ".join(IMAGE_FORMATS))
            if uploaded_file:
                session.uploaded_image = uploaded_file.read()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns(2)
    
    with col1:
        if source == "üõ∞Ô∏è NASA API" and session.nasa_image:
            st.image(session.nasa_image, 
                    caption=f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f} | üìÖ {selected_date}",
                    use_column_width=True)
        elif source == "üìÅ –§–∞–π–ª" and "uploaded_image" in session:
            st.image(session.uploaded_image, 
                    caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    use_column_width=True)

    if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        if (source == "üõ∞Ô∏è NASA API" and not session.nasa_image) or \
           (source == "üìÅ –§–∞–π–ª" and "uploaded_image" not in session):
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
            
        try:
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                image = convert_image(session.nasa_image if source == "üõ∞Ô∏è NASA API" 
                                    else session.uploaded_image)
                
                detections = processor.run_inference(image)
                if not detections:
                    return
                
                detections.update({
                    "width": image.shape[1],
                    "height": image.shape[0]
                })
                
                visualized = visualizer.visualize(image, detections)
                col2.image(visualized, 
                          caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è",
                          use_column_width=True)
                
                visualizer.show_stats(detections)
                
        except Exception as e:
            st.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            st.exception(e)

if __name__ == "__main__":
    main()