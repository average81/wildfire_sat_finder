import cv2
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import PIL
import requests
import streamlit as st
import tempfile

from datetime import date
from io import BytesIO
from sentinelhub import (
    BBox,
    CRS,
    DataCollection,
    MimeType,
    SentinelHubRequest,
    SHConfig,
)
from typing import Any, Dict, Tuple, Union
from inference_sdk import InferenceHTTPClient

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
NASA_API_URL = "https://api.nasa.gov/planetary/earth/imagery"
ROBOFLOW_MODEL_ID = "wildfire-tksrf/2"
IMAGE_FORMATS = ("jpg", "jpeg", "png", "bmp", "tiff")


def configure_app():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit, —Ç–∞–∫–∏–µ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫,
    –∏–∫–æ–Ω–∫–∞, –º–∞–∫–µ—Ç –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    st.set_page_config(
        page_title="Fire Detection PRO",
        page_icon="üî•",
        layout="wide",
        initial_sidebar_state="expanded",
    )
    st.title("üî• –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤")
    st.caption("–ü—Ä–æ–µ–∫—Ç –¥–ª—è TSU CV 2025 | –¢–æ–ª—å–∫–æ Roboflow –º–æ–¥–µ–ª—å")


@st.cache_resource(show_spinner="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏...")
def load_model() -> InferenceHTTPClient:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏ Roboflow.

    Returns:
        InferenceHTTPClient: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.

    Raises:
        RuntimeError: –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.
    """
    try:
        client = InferenceHTTPClient(
            api_url="https://detect.roboflow.com",
            api_key="2UgAsIW11EHQmt8gh36L"
        )
        return client
    except Exception as e:
        st.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        st.stop()


def validate_coordinates(lat: float, lon: float) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.

    Args:
        lat (float): –®–∏—Ä–æ—Ç–∞.
        lon (float): –î–æ–ª–≥–æ—Ç–∞.

    Returns:
        Tuple[bool, str]: Tuple, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å,
                          –∞ –≤—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    if not (-90 <= lat <= 90):
        return False, "‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -90 –¥–æ 90"
    if not (-180 <= lon <= 180):
        return False, "‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -180 –¥–æ 180"
    return True, ""


def convert_image(image: Union[PIL.Image.Image, np.ndarray, bytes]) -> np.ndarray:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç numpy ndarray.

    Args:
        image (Union[PIL.Image.Image, np.ndarray, bytes]): –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    Returns:
        np.ndarray: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ BGR.

    Raises:
        ValueError: –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.
    """
    try:
        if isinstance(image, PIL.Image.Image):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PIL Image –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å OpenCV (BGR)
            return cv2.cvtColor(np.array(image.convert("RGB")), cv2.COLOR_RGB2BGR)
        if isinstance(image, bytes):
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            return cv2.imdecode(np.frombuffer(image, np.uint8), cv2.IMREAD_COLOR)
        if isinstance(image, np.ndarray):
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ BGR
            if image.ndim == 3 and image.shape[2] == 3:
                return image.copy()
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}") from e


class NASAAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NASA API —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """

    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä NASAAPI —Å –∑–∞–¥–∞–Ω–Ω—ã–º API –∫–ª—é—á–æ–º.

        Args:
            api_key (str): –ö–ª—é—á API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ NASA API.
        """
        self.api_key = api_key

    def fetch_image(self, lat: float, lon: float, date_str: str) -> PIL.Image.Image:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å NASA API –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –¥–∞—Ç–µ.

        Args:
            lat (float): –®–∏—Ä–æ—Ç–∞.
            lon (float): –î–æ–ª–≥–æ—Ç–∞.
            date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.

        Returns:
            PIL.Image.Image: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

        Raises:
            requests.HTTPError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ NASA API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π.
            ValueError: –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
        """
        params = {
            'lat': lat,
            'lon': lon,
            'date': date_str,
            'dim': 0.05,  # –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
            'api_key': self.api_key
        }
        try:
            response = requests.get(NASA_API_URL, params=params, timeout=20)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            return PIL.Image.open(BytesIO(response.content))
        except requests.HTTPError as http_err:
            raise requests.HTTPError(f"HTTP –æ—à–∏–±–∫–∞: {http_err}") from http_err
        except Exception as e:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}") from e


class SentinelHubAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Sentinel Hub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """

    def __init__(self, client_id: str, client_secret: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SentinelHubAPI —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

        Args:
            client_id (str): Client ID –¥–ª—è Sentinel Hub.
            client_secret (str): Client Secret –¥–ª—è Sentinel Hub.
        """
        try:
            self.config = SHConfig()
            self.config.sh_client_id = client_id
            self.config.sh_client_secret = client_secret

            if not self.config.sh_client_id or not self.config.sh_client_secret:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å Client ID –∏ Client Secret –¥–ª—è Sentinel Hub.")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SentinelHubAPI: {str(e)}") from e

    def fetch_image(
        self,
        lat: float,
        lon: float,
        start_date: str,
        end_date: str,
        delta_lon: float,
        delta_lat: float
    ) -> PIL.Image.Image:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Sentinel Hub API –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.

        Args:
            lat (float): –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏.
            lon (float): –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏.
            start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
            end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
            delta_lon (float): –î–µ–ª—å—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã –¥–ª—è –æ–±–ª–∞—Å—Ç–∏.
            delta_lat (float): –î–µ–ª—å—Ç–∞ —à–∏—Ä–æ—Ç—ã –¥–ª—è –æ–±–ª–∞—Å—Ç–∏.

        Returns:
            PIL.Image.Image: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

        Raises:
            ValueError: –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
        """
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
            bbox = BBox(
                (lon - delta_lon, lat - delta_lat, lon + delta_lon, lat + delta_lat),
                CRS.WGS84
            )
            size = (700, 700)  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            time_interval = (start_date, end_date)  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

            # –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            evalscript_true_color = """
            //VERSION=3

            function setup() {
                return {
                    input: [{
                        bands: ["B02", "B03", "B04"]
                    }],
                    output: {
                        bands: 3
                    }
                };
            }

            function evaluatePixel(sample) {
                return [sample.B04, sample.B03, sample.B02];
            }
            """

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Sentinel Hub
            request = SentinelHubRequest(
                evalscript=evalscript_true_color,
                input_data=[
                    SentinelHubRequest.input_data(
                        data_collection=DataCollection.SENTINEL2_L2A,
                        time_interval=time_interval,
                    )
                ],
                responses=[SentinelHubRequest.output_response("default", MimeType.PNG)],
                bbox=bbox,
                size=size,
                config=self.config,
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = request.get_data()
            if data:
                image = data[0]
                return PIL.Image.fromarray(np.uint8(image))
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Sentinel Hub")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Sentinel Hub: {str(e)}") from e


class FileHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª–æ–≤.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FileHandler. –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        """
        pass

    def upload_file(self, uploaded_file: bytes) -> np.ndarray:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç numpy –º–∞—Å—Å–∏–≤–∞.

        Args:
            uploaded_file (bytes): –ë–∞–π—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

        Returns:
            np.ndarray: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ BGR.

        Raises:
            ValueError: –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.
        """
        try:
            image = PIL.Image.open(BytesIO(uploaded_file))
            return convert_image(image)
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}") from e


class ImageProcessor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.
    """

    def __init__(self, model: InferenceHTTPClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–æ–¥–µ–ª—å—é –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.

        Args:
            model (InferenceHTTPClient): –ö–ª–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.
        """
        self.model = model
        self.confidence = 0.25  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

    def process_uploaded_file(self, uploaded_file: Union[PIL.Image.Image, bytes]) -> Union[np.ndarray, None]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ numpy –º–∞—Å—Å–∏–≤.

        Args:
            uploaded_file (Union[PIL.Image.Image, bytes]): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.

        Returns:
            Union[np.ndarray, None]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        try:
            return convert_image(uploaded_file)
        except Exception as e:
            st.error(f"üìÅ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return None

    def run_inference(self, image: np.ndarray) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

        Args:
            image (np.ndarray): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.

        Raises:
            ValueError: –ï—Å–ª–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        """
        try:
            with tempfile.NamedTemporaryFile(suffix=".jpg") as tmp:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                cv2.imwrite(tmp.name, image)
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
                result = self.model.infer(tmp.name, model_id=ROBOFLOW_MODEL_ID)
                if not result:
                    raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –ø—É—Å—Ç–æ–π")
                return {
                    "predictions": result.get("predictions", []),
                    "time": result.get("time", 0),
                    "width": image.shape[1],
                    "height": image.shape[0]
                }
        except Exception as e:
            st.error(f"ü§ñ –û—à–∏–±–∫–∞ AI-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {str(e)}")
            return {}


class ResultVisualizer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤.
        """
        self.class_colors = {
            "fire": (0, 0, 255),
            "smoke": (255, 0, 0),
            "Wildfire": (0, 255, 0)
        }

    def visualize(self, image: np.ndarray, detections: Dict[str, Any]) -> np.ndarray:
        """
        –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç bounding boxes –∏ –º–µ—Ç–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

        Args:
            image (np.ndarray): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
            detections (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.

        Returns:
            np.ndarray: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏.
        """
        img = image.copy()
        for pred in detections.get("predictions", []):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                x_center = pred["x"] * detections["width"]
                y_center = pred["y"] * detections["height"]
                width = pred["width"] * detections["width"]
                height = pred["height"] * detections["height"]

                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞
                x = int(x_center - width / 2)
                y = int(y_center - height / 2)
                w = int(width)
                h = int(height)

                # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞
                color = self.class_colors.get(pred["class"], (0, 0, 255))
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
                label = f"{pred['class']} {pred['confidence']:.2f}"
                # –ù–∞–Ω–æ—Å–∏–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                cv2.putText(img, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
            except KeyError as e:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∫–ª—é—á –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
        return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    def show_stats(self, detections: Dict[str, Any]):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ü–∏–π, –≤–∫–ª—é—á–∞—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.

        Args:
            detections (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.
        """
        stats = {"fire": 0, "smoke": 0, "Wildfire": 0}
        confidences = []

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —Å–±–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        for pred in detections.get("predictions", []):
            cls_name = pred.get("class")
            confidence = pred.get("confidence", 0)
            if cls_name in stats:
                stats[cls_name] += 1
                confidences.append(confidence)

        with st.expander("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", expanded=True):
            cols = st.columns(3)
            cols[0].metric("üî• –ü–æ–∂–∞—Ä—ã", stats["fire"], delta_color="off")
            cols[1].metric("üí® –î—ã–º", stats["smoke"], delta_color="off")
            cols[2].metric("üåü Wildfire", stats["Wildfire"], delta_color="off")

            if confidences:
                st.markdown(f"**üïí –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {detections.get('time', 0):.2f} ms")
                plt.figure(figsize=(10, 4))
                plt.hist(confidences, bins=20, range=(0, 1), color='red', alpha=0.7)
                plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
                plt.xlabel("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
                plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")
                st.pyplot(plt, clear_figure=True)
            else:
                st.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit. –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    configure_app()
    model = load_model()
    processor = ImageProcessor(model)
    visualizer = ResultVisualizer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "nasa_image" not in st.session_state:
        st.session_state.nasa_image = None
    if "sentinelhub_image" not in st.session_state:
        st.session_state.sentinelhub_image = None
    if "uploaded_image" not in st.session_state:
        st.session_state.uploaded_image = None

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        processor.confidence = st.slider(
            "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            0.0, 1.0, 0.25, 0.05,
            help="–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ–¥–µ–ª–∏."
        )

        st.header("üåç –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        source = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:",
            ["üìÅ –§–∞–π–ª", "üõ∞Ô∏è NASA API", "üõ∞Ô∏è Sentinel Hub API"],
            index=0
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "üõ∞Ô∏è NASA API"
        if source == "üõ∞Ô∏è NASA API":
            api_key = st.text_input(
                "–ö–ª—é—á NASA API",
                type="password",
                value='uquMPkqqugLLa51krBVA3bRHlb5M6IZg2SrJkKiE',
                help="–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://api.nasa.gov"
            )

            col1, col2 = st.columns(2)
            with col1:
                lat = st.number_input("–®–∏—Ä–æ—Ç–∞", -90.0, 90.0, 39.2106, format="%.6f")
            with col2:
                lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞", -180.0, 180.0, -121.6701, format="%.6f")

            selected_date = st.date_input(
                "–î–∞—Ç–∞ —Å—ä–µ–º–∫–∏",
                date(2019, 1, 2),
                min_value=date(2017, 1, 1)
            )

            if st.button("üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ —Å–ø—É—Ç–Ω–∏–∫–∞"):
                valid, msg = validate_coordinates(lat, lon)
                if not valid:
                    st.error(msg)
                    st.stop()

                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å NASAAPI —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                    nasa_api = NASAAPI(api_key)
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    st.session_state.nasa_image = nasa_api.fetch_image(
                        lat,
                        lon,
                        selected_date.isoformat()
                    )
                    st.toast("‚úÖ –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="üõ∞Ô∏è")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "üõ∞Ô∏è Sentinel Hub API"
        elif source == "üõ∞Ô∏è Sentinel Hub API":
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Sentinel Hub")
            client_id = st.text_input(
                "Client ID",
                type="password",
                value='5ddcc634-6035-4849-bcfd-387cd1e5795c',
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Sentinel Hub Client ID"
            )
            client_secret = st.text_input(
                "Client Secret",
                type="password",
                value='XdyrnyOkCQfaYn9Lqa0M70fB9HvxUdT8',
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Sentinel Hub Client Secret"
            )

            col1, col2 = st.columns(2)
            with col1:
                lat = st.number_input("–®–∏—Ä–æ—Ç–∞", -90.0, 90.0, 39.2106, format="%.6f")
            with col2:
                lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞", -180.0, 180.0, -121.6701, format="%.6f")

            date_col1, date_col2 = st.columns(2)
            with date_col1:
                start_date = st.date_input(
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
                    date(2019, 1, 2),
                    min_value=date(2015, 6, 23)
                )
            with date_col2:
                end_date = st.date_input(
                    "–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞",
                    date(2019, 1, 3),
                    min_value=start_date
                )

            delta_col1, delta_col2 = st.columns(2)
            with delta_col1:
                delta_lon = st.number_input(
                    "–î–µ–ª—å—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã",
                    0.01, 5.0, 0.5, format="%.3f",
                    help="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ –¥–æ–ª–≥–æ—Ç–µ"
                )
            with delta_col2:
                delta_lat = st.number_input(
                    "–î–µ–ª—å—Ç–∞ —à–∏—Ä–æ—Ç—ã",
                    0.01, 5.0, 0.4, format="%.3f",
                    help="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ —à–∏—Ä–æ—Ç–µ"
                )

            if st.button("üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Sentinel Hub"):
                valid, msg = validate_coordinates(lat, lon)
                if not valid:
                    st.error(msg)
                    st.stop()

                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å SentinelHubAPI —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    sentinel_api = SentinelHubAPI(client_id, client_secret)
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    st.session_state.sentinelhub_image = sentinel_api.fetch_image(
                        lat,
                        lon,
                        start_date.isoformat(),
                        end_date.isoformat(),
                        delta_lon,
                        delta_lat
                    )
                    st.toast("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Sentinel Hub —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", icon="üõ∞Ô∏è")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Sentinel Hub: {str(e)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "üìÅ –§–∞–π–ª"
        else:
            file_handler = FileHandler()
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                type=IMAGE_FORMATS,
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: " + ", ".join(IMAGE_FORMATS)
            )
            if uploaded_file:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    st.session_state.uploaded_image = uploaded_file.read()
                    st.success("üìÇ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    col1, col2 = st.columns(2)

    with col1:
        if source == "üõ∞Ô∏è NASA API" and st.session_state.nasa_image:
            st.image(
                st.session_state.nasa_image,
                caption=f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f} | üìÖ {selected_date}",
                use_column_width=True
            )
        elif source == "üìÅ –§–∞–π–ª" and st.session_state.uploaded_image:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                uploaded_image = PIL.Image.open(BytesIO(st.session_state.uploaded_image))
                st.image(
                    uploaded_image,
                    caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    use_column_width=True
                )
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        elif source == "üõ∞Ô∏è Sentinel Hub API" and st.session_state.sentinelhub_image:
            st.image(
                st.session_state.sentinelhub_image,
                caption=f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.4f}, {lon:.4f} | üìÖ {start_date} - {end_date}",
                use_column_width=True
            )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (source == "üõ∞Ô∏è NASA API" and not st.session_state.nasa_image) or \
           (source == "üìÅ –§–∞–π–ª" and not st.session_state.uploaded_image) or \
           (source == "üõ∞Ô∏è Sentinel Hub API" and not st.session_state.sentinelhub_image):
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            st.stop()

        try:
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if source == "üõ∞Ô∏è NASA API":
                    image_data = st.session_state.nasa_image
                elif source == "üõ∞Ô∏è Sentinel Hub API":
                    image_data = st.session_state.sentinelhub_image
                elif source == "üìÅ –§–∞–π–ª":
                    image_data = st.session_state.uploaded_image
                else:
                    st.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
                    st.stop()

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç numpy –º–∞—Å—Å–∏–≤–∞
                if source == "üìÅ –§–∞–π–ª":
                    image = processor.upload_file(image_data)
                else:
                    image = convert_image(image_data)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏
                detections = processor.run_inference(image)
                if not detections:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
                    st.stop()

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                detections.update({
                    "width": image.shape[1],
                    "height": image.shape[0]
                })

                # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                visualized = visualizer.visualize(image, detections)
                col2.image(
                    visualized,
                    caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è",
                    use_column_width=True
                )

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                visualizer.show_stats(detections)

        except Exception as e:
            st.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            st.exception(e)


if __name__ == "__main__":
    main()