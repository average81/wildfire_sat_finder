Класс получения изображения (Image_service):
При инициализации заполняет список поддерживаемых серверов следующими данными: название сервиса, токен для доступа, url, описание команды для получения изображения (возможно еще какими-то данными, необходимыми для работы с сервисом. 
Должен содержать метод "get_services()", который возвращает список имен сервисов и их ID.
Должен содержать метод "set_active_service(service_id)" для задания сервиса, с которым будем работать, на вход принимает id сервиса, которое получили из "get_services"
Должен содержать метод "get_image(angle_coord, angle_width, angle_height)", который возвращает изображение и дату его съемки. На вход принимает: angle_coord - кортеж угловых координат (широты и долготы) типа float, angle_width - ширина изображения в градусах (тип float), angle_height - высота изображения в градусах (тип float).
Опционально может содержать метод "get_images([[angle_coord, angle_width, angle_height]...])", который выдает сразу список с изображениями и их датами. Может быть применим, если асинхронный запрос сразу нескольких изображений поддерживается сервисом и это быстрее работает, чем получать изображения по очереди.
----------------------------
Класс детектора (Anomaly_detector):
При инициализации подготавливает модель к работе
Должен содержать метод "detect(image)", который принимает изображение в формате трехмерного массива (высота, ширина, цвет) и возвращает список обнаруженных аномалий. Каждая аномалия описывается в рамках словаря: {type_name:str, type_id:int, score:float, box:List(x,y)}, где type_name - строка с наименованием аномалии, type_id - уникальный номер аномалии в списке аномалий, score - вероятность аномалии по мнению модели, box - координаты углов прямоугольника, описывающего аномалию.
Должен содержать метод "get_models()" для получения списка моделей. Возвращает список имен моделей.
Должен содержать метод "set_model(id)" для выбора активной модели.
------------------------------
Класс отправки уведомлений:
Пока ориентируемся на отправку уведомлений по почте, но если сможем написать отправку в телеграмм, или еще какой мессенджер или mqtt брокер, будет еще круче.
Класс должен иметь метод set_preferences(e-mails:List(e-mail), smtp:str, user:str, password:str), где e-mails - список почтовых адресов, куда должны отправляться уведомления, smtp - адрес сервера отправки почты, user - строка с логином пользователя, password - строка с паролем пользователя.
Класс должен иметь метод send_notice(notice:str), отправляющий по настроенным адресам текстовое уведомление notice. Если успеем, лучше отправлять html страницу с описанием обнаруженных аномалий и, возможно, изображениями, на которых они обнаружены.
-----------------------------
Веб сервер Rest API + html:
Сервер пишем на fastapi, чтобы не мучиться с swagger. Сервер должен иметь два интерфейса: json и html. Основные точки доступа:
"/" (GET): страница общей информации, например название микросервиса, при доступе по json, страница html с настройками сервиса и визуализацией при доступе по html.
"/emails" (GET): получение списка адресов для уведомлений и их ID.
"/emails/add" (POST): добавление нового адреса для уведомлений. Возвращает добавленный адрес и его ID.
"/emails/{ID}" (DELETE): удаление из списка адресов для уведомления адреса с заданным ID.
"/regions" (GET): получение списка регионов для автоматического наблюдения с их ID. Для простоты будем использовать прямоугольные области, заданные угловыми координатами углов.
"/regions/add" (POST): добавление региона для автоматического наблюдения. Возвращает регион и его ID.
"/regions/{ID}" (DELETE): удаление региона для автоматического наблюдения из списка регионов по его ID.
"/areaimg" (GET): получение изображения поверхности Земли, в параметрах нужно передать угловые координаты, ширину и высоту изображения в угловых координатах. Будет использован для тестирования и демонстрации работы.
"/tstimage" (GET,POST): получение или отправка тестового изображения из/в сервис. При отправке изображение передается в теле запроса.
"/tstdetect" (GET): получение результат работы детектора на тестовом изображении (выдает исходное изображение, изображение с рамками вокруг объектов, таблицу метрик).
"/areamap/{ID}" (GET): получение изображения карты региона с заданным ID с нанесенными аномалиями. (Это уже прям круто будет).
"/sat_service" (PUT): настройка модуля получения изображений Земли. Передает все параметры, необходимы для работы модуля.
"/detector" (PUT): настройка модуля детектора. Например, порог для отсечки по параметру score.
"/sat_services" (GET,PUT): запрос/выбор спутниковых/спутникового сервисов/сервиса.
"/detector" (GET): страница с примером работы детектора (выдает исходное изображение, изображение с рамками вокруг объектов, таблицу метрик). На вход принимает угловые координаты и угловые размеры изображения.

При обращении к серверу по html выдаваемая страница должна иметь формы для настройки модулей, а также кнопки для загрузки изображений и тестирования детектора. Должны быть поля для вывода исходных изображений и изображений с наложенными полигонами аномалий.Также нужно выводить таблицу с текущими активными аномалиями и их координатами, а также, если успеем, карту с нанесенными метками аномалий. Если не успеем, опишем все, что не успели в развитии проекта. 

----------------------------
Класс работы с базой данных:
Класс при инициализации подключается к локальной базе данных.
Должен содержать методы:
add_anomaly(anomaly:dict) для добавления новой записи в базу данных. Принимает на вход словарь с описанием аномалии, как в классе детектора.
get_anomalies(start_time:time, end_time:time) для получения списка аномалий за выбранный период времени. Выдает список кортежей (id, anomaly, time).
del_anomaly(id) для удаления из базы аномалии с конкретным id.
del_anomalies(start_time:time, end_time:time) для удаления блока записей за выбранный период.