@startuml
'https://plantuml.com/sequence-diagram

title Wildfire monitoring microservice API
actor user

autonumber
== Get general info (json)/view start page (html) ==
user -> backend_server:  GET("/") - info request
backend_server --> user: info/start page Response
== Get notification e-mails ==
user -> backend_server:  GET("/emails") - e-mails list request
backend_server --> user: E-mails list Response
== Add new notification e-mail ==
user -> backend_server: POST("/emails/add") -  request to add new e-mail
backend_server -> user: New e-mail with ID
== Delete notification e-mail from e-mail list ==
user -> backend_server: DELETE("/emails/{ID}") - delete e-mail with id=ID request
backend_server -> user: return status of operation
== Get regions for monitoring ==
user -> backend_server: GET("/regions") - regions list request
backend_server -> user: return list of regions for monitoring
== Add new region for monitoring ==
user -> backend_server: POST("/regions/add") - request to add new region
backend_server -> user: return status of operation
== Delete region from regions list ==
user -> backend_server: DELETE("/regions/{ID}") - delete region with id=ID request
backend_server -> user: return status of operation
== Get satellite Earth surface photo ==
user -> backend_server: GET("/areaimg") - photo request for concrete longitude and latitude
backend_server -> satellite_service: Request Earth surface photo at concrete coordinates
satellite_service -> backend_server: Return photo
backend_server -> user: return photo
== Send custom image to test microservice ==
user -> backend_server: POST("/tstimage") - test image send request
backend_server -> user: return status of operation
== Get test image from server ==
user -> backend_server: GET("/tstimage") - get last test image request
backend_server -> user: return last test image
== Get detector result image for the test image ==
user -> backend_server: GET("/tstdetect") - detector result image for the test image request
backend_server -> scan_server: request test image processing by detector
scan_server -> backend_server: return result image
backend_server -> user: return result image
== Get region map image with wildfire marks ==
user -> backend_server: GET("/areamap/{ID}") - request map image for the region with id=ID
backend_server -> backend_server: request active wildfire data
backend_server -> map_service: request map image for concrete coordinates with required marks
map_service -> backend_server: return map image
backend_server -> user: return map image
== Get/update satellite service parameters ==
user -> backend_server: GET/PUT("/sat_service") - get/update parameters request
backend_server -> user: return satellite service parameters
== Get/update detector parameters ==
user -> backend_server: GET/PUT("/detector") - get/update parameters request
backend_server -> user: return detector parameters
@enduml